# Defines the address spaces/blocks for each addressible device
MEMORY {
    # ZP is zero page
    ZP:        start =    $0, size =  $100, type   = rw, define = yes;
    RAM:       start =  $200, size = $0E00, define = yes;
    ROM:       start = $F800, size = $0800, file   = %O;
}
# Defines the properties of the various addressible segments available at each
# addressible device
SEGMENTS {
    # Data in page 0, defined by ZP as starting at $0 with length $100
    ZEROPAGE: load = ZP,  type = zp,  define   = yes;
    # Initialized data that can be modified by the program, stored in RAM
    DATA:     load = ROM, type = rw,  define   = yes, run = RAM;
    # Uninitialized data stored in RAM (used for variable storage)
    BSS:      load = RAM, type = bss, define   = yes;
    # Uninitialized C-level heap storage in RAM, optional
    HEAP:     load = RAM, type = bss, optional = yes;
    # The program initialization code, stored in ROM
    STARTUP:  load = ROM, type = ro;
    # The code run once to initialize the system, stored in ROM
    ONCE:     load = ROM, type = ro,  optional = yes;
    # The program code, stored in ROM
    CODE:     load = ROM, type = ro;
    # Initialized data that cannot be modified by the program, stored in ROM
    RODATA:   load = ROM, type = ro;
    # The interrupt vector table, stored in ROM at location $FFFA
    VECTORS:  load = ROM, type = ro,  start    = $FFFA;
}
# Declare the usage of data constructors and destructors for dynamic memory
# allocations in C, i.e. by `malloc()` or similar
FEATURES {
    CONDES:    segment = STARTUP,
               type    = constructor,
               label   = __CONSTRUCTOR_TABLE__,
               count   = __CONSTRUCTOR_COUNT__;
    CONDES:    segment = STARTUP,
               type    = destructor,
               label   = __DESTRUCTOR_TABLE__,
               count   = __DESTRUCTOR_COUNT__;
}

SYMBOLS {
    # Define the stack size for the application
    __STACKSIZE__:  value = $0200, type = weak;
}
